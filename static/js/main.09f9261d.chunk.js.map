{"version":3,"sources":["components/CSV/dangerous.csv","components/CSV/half.csv","components/Checker.js","components/Info.js","components/Contact.js","components/Improve.js","App.js","reportWebVitals.js","index.js"],"names":["Checker","useState","website","setWebsite","displayName","setDisplay","websiteDanger","setDanger","color","fontSize","textAlign","resultStyle","setstyle","dangerousCSV","setDangerous","halfCSV","setHalf","useEffect","Papa","parse","dangerous","download","complete","results","data","console","log","half","className","href","src","onSubmit","evt","preventDefault","eWebsite","toLowerCase","eWebArray","split","isWrong","length","websiteFound","temp","map","dWebsite","hWebsite","isolatedWebsite","substring","safety","prompt","displayInfo","type","value","onChange","e","target","style","Info","textCategory","setCategory","text","setText","displayText","onClick","Contact","Improve","App","id","to","path","component","window","location","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09f9261d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/dangerous.dc0bdaf0.csv\";","export default __webpack_public_path__ + \"static/media/half.8398dc5c.csv\";","import React, {useState, useEffect} from 'react';\nimport Papa from \"papaparse\";\nimport dangerous from \"./CSV/dangerous.csv\"; \nimport half from \"./CSV/half.csv\";\n\nfunction Checker() {\n  const [website, setWebsite] = useState('Type in your website here');\n  const [displayName, setDisplay] = useState('Www.google.com');\n  const [websiteDanger, setDanger] = useState(5); // scale from 0-100 or something\n  const [resultStyle, setstyle] = useState({color: 'blue', fontSize: 20, textAlign:'center'});\n  const [dangerousCSV, setDangerous] = useState(null);\n  const [halfCSV, setHalf] = useState(null);\n\n  useEffect(() =>  {\n    Papa.parse(dangerous, {\n       download: true,\n       complete: function(results){\n         setDangerous(results.data); // dangerousCSV = an array of arrays, dangerousCSV[index][0]\n         console.log(dangerousCSV);\n       }\n     })\n    Papa.parse(half, {\n      download: true,\n      complete: function(results){\n        setHalf(results.data); // dangerousCSV = an array of arrays, dangerousCSV[index][0]\n        console.log(halfCSV);\n      }\n    })\n  }, []); // [] means that this useEffect will not repeat\n\n  const displayInfo = () => {\n    let eWebsite = website.toLowerCase();\n    let eWebArray = eWebsite.split('.');\n    let isWrong = false;\n    console.log(eWebArray);\n    if (eWebArray.length != 3 || (eWebArray[0] != \"www\" && eWebArray[2] != \"com\" && \n    eWebArray[2] != \"org\" && eWebArray[2] != \"gov\" && eWebArray[2] != \"io\" && eWebArray[2] != \"net\")){\n      isWrong = true;\n    }\n    console.log(isWrong);\n    setDisplay(website);\n    // check which array website is in\n    \n    let websiteFound = false;\n    let temp = setDanger;\n\n    \n    \n    dangerousCSV.map((dWebsite) => {\n      if (dWebsite[0] === eWebsite){\n        setDanger(10);\n        temp = 10;\n        websiteFound = true;\n      }\n    });\n\n    halfCSV.map((hWebsite) =>{\n      if (hWebsite[0] === eWebsite){\n        setDanger(5);\n        temp = 5;\n        websiteFound = true;\n      }    \n    });\n\n    if (!websiteFound){\n      \n      temp = 0;\n      setDanger(0);\n    }\n    \n    \n    let isolatedWebsite = (website.substring(4, website.length-4));\n    console.log(isolatedWebsite);\n    console.log(website);\n    let safety = prompt(\"Did you use safety measures indicated in the improve tab? Y or N.\");\n    if (safety == \"Y\" || safety == \"y\"){\n      setDanger((temp) - 3);\n      console.log(websiteDanger)\n    }\n\n    \n    if (temp === 0 && isWrong == false){\n      setstyle({color: 'green', fontSize: 20, textAlign:'center'});\n    }\n    else if (temp === 5){\n      setstyle({color: 'blue', fontSize: 20, textAlign:'center'});\n    }\n    else if (temp === 10 || temp === -1 || isWrong == true){\n      setstyle({color: 'red', fontSize: 20, textAlign:'center'});\n    }\n    \n\n    if (isWrong == true){\n      setDanger(11);\n    }\n    console.log (websiteDanger);\n  }\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault(); // prevent function misfires\n    //alert(`Calculating Score for ${website}`)\n    displayInfo(); // calling the function to calculate\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <a>\n          \n        </a>\n        <h3>Website security</h3>\n        <a href src = \"www.hi.com\"></a>\n        <form onSubmit={handleSubmit}> {/* when you click submit, this will call handleSubmit */}\n          <label>\n            Website Name: \n            <input\n              type=\"text\"\n              value={website}\n              onChange={e => setWebsite(e.target.value)}\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        {/* <p>Did you use safety measures? These safety measures include using a VPN, browsing incognito, clearing your cache, or rejecting cookies?</p>\n        <button>Yes</button> */}\n        \n        <p style={resultStyle}>You visited the website {displayName}. {websiteDanger == 0 ? \"This website is safe.  Happy browsing! Make sure there were no typos\" \n        : websiteDanger === 5 ? \"It is a bit unsafe.  That means it is ok to use, but it is likely a data harvesting site that will track you. Click the improve button at the top to try and make your browsing experience safer, or avoid this site. \" \n        : websiteDanger == 10 ? \"AVOID THIS SITE IF YOU CAN. If you absolutely must use this site, visit our improve page to see how to improve\": \n        websiteDanger == 2? \"This is a little  bit dangerous, but you used safety measures!\" : \n        websiteDanger == 7? \"This website is still dangerous, even though you used safety measures. If you can, I would still recommend using a different site. \"\n        : \"Unfortunately, this is not a valid url. Make sure it is in the form of www.entersite.com. \"}</p> {/* style this is css */}\n        \n      </header>\n    </div>\n  );\n}\n\n/*\n  condition ? (what happens if true) : (what happens if false)\n*/\n\nexport default Checker;","import React, {useState, useEffect} from 'react';\n\nfunction Info() {\n  const [textCategory, setCategory] = useState('None');\n  const [ text, setText ] = useState('');\n\n  useEffect(() => {\n    displayText();\n  }, [textCategory]);\n\n  const displayText = () => {\n    if (textCategory === \"None\"){\n      setText(\"\");\n    }\n    else if (textCategory === \"Web Crawler\"){\n      setText(\"The main way we check web security is  through a web-crawler called openwpm. This web crawler internally runs the website and then tracks the data pulls. We filter these to only show data collected from the user, instead of  images and other things.We then run it through our formula that gives out a number. \");\n    }\n    else if(textCategory === \"Cookies\"){\n      setText(\"Cookies are little bits of information that are stored and then sent to the server about the user. This is almost as important in our formula as the web-crawler data, but not as much. Not all cookies are put on by the website developer. Google sets hundreds of millions of them all together. \")\n    }\n\n    else if(textCategory === \"Google Safety Check\"){\n      setText(\"Google has a safety checker, which is super simple to use and it is one of the easiest ways to get a brief checking of the website. There is not a lot to it, but one caveat that we found was that you cannot input very large sites. For example, one cannot input www.reddit.com, as it is a vast site that cannot be scanned. Instead you must use a smaller page, like reddit.com/home.\")\n    }\n\n    else if(textCategory === \"Ads\"){\n      setText(\"The number of ads is not the best indicator of how safe a website is, but is still fairly useful. This is why it is weighted least in our super-secret formula. I used an adblocker that counts the amount of advertisements. For example, when you go on an unsafe website it often has more ads, and our careful researched determined that there is a slight but not large correlation with a large average deviation. \")\n    }\n    else{\n      setText(\"\");\n    }\n    \n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3>About our Site</h3>\n        <p>{text}</p>\n        <ul>\n          <li>\n            <button onClick={(evt) => {evt.preventDefault(); setCategory('Web Crawler');}}>Web Crawler</button>\n          </li>\n          <li>\n            <button onClick={(evt) => {evt.preventDefault(); setCategory('Cookies');}}>Cookies</button>\n          </li>\n          <li>\n            <button onClick={(evt) => {evt.preventDefault(); setCategory('Ads');}}>Ads</button>\n          </li>\n          <li>\n            <button onClick={(evt) => {evt.preventDefault(); setCategory('Google Safety Check');}}>Google Safety Check</button>\n          </li>\n        </ul>\n      </header>\n    </div>\n  );\n}\n\n\nexport default Info;\n\n\n/*\n  host on github pages\n  styling\n*/\n\n/*\n  callback function\n    - a function that executes upon the end of another specific function\n    - useEffect acts as our callback, whenever 'textcategory' changed state, our useEffect will call displayText() with the updated state\n*/","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nfunction Contact() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <a>\n          \n        </a>\n        <h3>Contact Us</h3>\n        \n        <p>To report a problem with this app or its classifications, please contact us at <a src = \"mailto:shauryamittal5@gmail.com\">shauryamittal5@gmail.com</a></p>\n      </header>\n    </div>\n  );\n}\n \n\nexport default Contact;\n\n","import React, {useState, useEffect} from 'react';\n\nfunction Improve() {\n//   const [textCategory, setCategory] = useState('None');\n//   const [ text, setText ] = useState('');\n\n//   useEffect(() => {\n//     displayText();\n//   }, [textCategory]);\n\n//   const displayText = () => {\n//     if (textCategory === \"None\"){\n//       setText(\"\");\n//     }\n//     else if (textCategory === \"Web Crawler\"){\n//       setText(\"The main way we check web security is  through a web-crawler called openwpm. This web crawler internally runs the website and then tracks the data pulls. We filter these to only show data collected from the user, instead of  images and other things.We then run it through our formula that gives out a number. \");\n//     }\n//     else if(textCategory === \"Cookies\"){\n//       setText(\"Cookies are little bits of information that are stored and then sent to the server about the user. This is almost as important in our formula as the web-crawler data, but not as much. Not all cookies are put on by the website developer. Google sets hundreds of millions of them all together. \")\n//     }\n\n//     else if(textCategory === \"Google Safety Check\"){\n//       setText(\"Google has a safety checker, which is super simple to use and it is one of the easiest ways to get a brief checking of the website. There is not a lot to it, but one caveat that we found was that you cannot input very large sites. For example, one cannot input www.reddit.com, as it is a vast site that cannot be scanned. Instead you must use a smaller page, like reddit.com/home.\")\n//     }\n\n//     else if(textCategory === \"Ads\"){\n//       setText(\"The number of ads is not the best indicator of how safe a website is, but is still fairly useful. This is why it is weighted least in our super-secret formula. I used an adblocker that counts the amount of advertisements. For example, when you go on an unsafe website it often has more ads, and our careful researched determined that there is a slight but not large correlation with a large average deviation. \")\n//     }\n//     else{\n//       setText(\"\");\n//     }\n    \n//   };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n        <h3>So you want to improve your browsing habits. Great!\n            \n        </h3>\n        <p>\n            <strong>Some ways to improve:</strong>\n        </p>\n        <ol>\n            <li>\n                <b>Use a VPN</b>. A VPN (virtual private network) hides your IP adress from sneaky websites trying to steal it from you. Our tests show that there is a significant reduction in traceable data storage when a VPN is used. \n            </li>\n            <li>\n                <b>Browse with Safari or DuckDuckGo.</b> These browesers prevent trackers from profiling you 60% of the time. \n            </li>\n            <li>\n                <b>Browse incognito.</b> This prevents your browser from tracking you. Yes, even your browser wants a piece of your data, but don't give it to them,\n            </li>\n            <li>\n                <b>Clear your cache often.</b> Your cache stores files that are prime targets for data theives, but are not important for you. Clear it as often as you can. This will also speed up your computer. \n            </li>\n        </ol>\n\n        {/* <ul>\n          <li>\n            <button onClick={(evt) => {evt.preventDefault(); setCategory('Web Crawler');}}>Web Crawler</button>\n          </li>\n          <li>\n            <button onClick={(evt) => {evt.preventDefault(); setCategory('Cookies');}}>Cookies</button>\n          </li>\n          <li>\n            <button onClick={(evt) => {evt.preventDefault(); setCategory('Ads');}}>Ads</button>\n          </li>\n          <li>\n            <button onClick={(evt) => {evt.preventDefault(); setCategory('Google Safety Check');}}>Google Safety Check</button>\n          </li>\n        </ul> */}\n      </header>\n    </div>\n  );\n}\n\n\nexport default Improve;\n\n\n/*\n  host on github pages\n  styling\n*/\n\n/*\n  callback function\n    - a function that executes upon the end of another specific function\n    - useEffect acts as our callback, whenever 'textcategory' changed state, our useEffect will call displayText() with the updated state\n*/","import './App.css';\nimport React from 'react';\nimport Checker from \"./components/Checker.js\";\nimport Info from \"./components/Info.js\";\nimport Contact from \"./components/Contact.js\";\nimport Improve from \"./components/Improve.js\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link\n} from 'react-router-dom'; \n/*\n  changes you want for sure on your website, PUSH TO GITHUB\n  github will rebuild the website from there\n\n  make sure you save your MIT app\n  - show the early progression of the website\n\n\n  we need index.js in the root directory\n  \"github pages showing readme\"\n*/\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          {/* navigation bar start */}\n          <ul id=\"headerBar\">\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/info\">Info</Link>\n            </li>\n            <li>\n              <Link to=\"/contact\">Contact Us</Link>\n            </li>\n            <li>\n              <Link to=\"/improve\">Improve</Link>\n            </li>\n          </ul>\n\n          {/* navigation bar end*/}\n\n          <Switch>\n            <Route path=\"/mail\" component={() => {\n              window.location.href = \"www.google.com\";\n              return null;\n            }} />;\n                <Route path=\"/improve\">\n              <Improve />\n            </Route>\n            <Route path=\"/info\">\n              <Info />\n            </Route>\n            <Route path=\"/contact\">\n              <Contact />\n            </Route>\n            <Route path=\"/\">\n              <Checker />\n            </Route>\n            <Route path=\"/improve\">\n              <Improve />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\n\n\n\n\nexport default App;\n// hw:\n  // 1. Fill in the Info and Contact modules\n    // if you want a button to show text: \n  // 2. Style the navigation bar (add classes to ul, li, Link => App.css and style)\n\n// Later:\n  // add in all the data for Checker\n  // link to external email\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n/*\nhandleFiles = files => {\n  var reader = new FileReader();\n  reader.onload = function(e) {\n      // Use reader.result\n      alert(reader.result)\n  }\n  reader.readAsText(files[0]);\n} */\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n \n)\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}